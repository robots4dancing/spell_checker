package spell_checker;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.TreeSet;

public class SpellCheck {

	// We could have also used TreeSet for the dictionary 
	private HashSet<String> dictionary = new HashSet<String>();

	private TreeSet<String> miss_spelled_words = new TreeSet<String>();

	public SpellCheck() throws FileNotFoundException
	{
		// Add all of the words from "dictionary.txt" to the dictionary HashSet    }
		Scanner input = null;
		try {
			input = new Scanner (new File("dictionary.txt"));

			while(input.hasNextLine())
			{
				dictionary.add(input.nextLine());
			}
		}

		catch (FileNotFoundException e) 
		{
			System.out.println("Can't open file: dictionary.txt");
		}
		finally
		{
			if (input != null)
				input.close();
		}
	}

	public void checkSpelling(String fileName) throws FileNotFoundException
	{
		Scanner input = null;
		Scanner keyboard = null;
		String line = null;
		String word = null;
		String answer = null;
		int lineNumber = 1;
		int counter = 0;
		System.out.println("======== Spell checking " + fileName + " =========");

		// Clear miss_spelled_words
		miss_spelled_words.clear();

		// Read in each line from "fileName"
		// For each line, break the line into words using the following StringTokenizer
		try{
			input = new Scanner (new File(fileName));
			keyboard = new Scanner (System.in);

			while(input.hasNextLine())
			{
				line = input.nextLine();
				StringTokenizer st = new StringTokenizer(line, " \t,.;:-%'\"");
				while(st.hasMoreTokens())
				{
					// lower case each word obtained from the StringTokenizer
					word = st.nextToken().toLowerCase();
					// skip word if the first character is not a letter
					if(!Character.isLetter(word.charAt(0)))
					{
						continue;
					}
					// Skip over word if it can be found in either dictionary, or miss_spelled_words
					if(dictionary.contains(word) || miss_spelled_words.contains(word))
					{
						continue;
					}
					// If word ends with 's', then try the singular version of the word in the dictionary and miss_spelled_words ... skip if found
					if(word.charAt(word.length() - 1) == 's')
					{
						if(dictionary.contains(word.substring(0, word.length() - 1)) || miss_spelled_words.contains(word.substring(0, word.length() - 1)))
						{
							continue;
						}
					}
					// Print line containing miss-spelled word(make sure you only print it once if multiple miss-spelled words are found on this line)
					// Ask the user if he wants the word added to the dictionary or the miss-spelled words and add word as specified by the user
					if(counter == 0)
					{
						System.out.println(lineNumber + " : " + line);
						counter++;
					}

					if(!miss_spelled_words.contains(word))
					{
						System.out.println(word + " not in dictionary. Add to dictionary? (y/n)");
						answer = keyboard.next();
						if(answer.equals("y"))
						{
							dictionary.add(word);
						}
						else
						{
							miss_spelled_words.add(word);
						}
					}
				}
				counter = 0;
				lineNumber++;
			}
		}

		catch (FileNotFoundException e) 
		{
			System.out.println("Can't open file: " + fileName);
		}
		finally
		{
			if (input != null)
				input.close();
		}
	}

	public void dump_miss_spelled_words()
	{
		// Print out the miss-spelled words
		Iterator<String> it = miss_spelled_words.iterator();

		System.out.println("****** Miss spelled words ******");

		while(it.hasNext())
		{
			System.out.println(it.next());
		}
	}


	public static void main(String[] args) {

		try {
			SpellCheck spellCheck = new SpellCheck();

			for (int i=0; i < args.length; i++)
			{
				spellCheck.checkSpelling(args[i]);
				spellCheck.dump_miss_spelled_words();
			}            
		} 
		catch (FileNotFoundException e) 
		{
			System.out.println(e);
		}


	}

}
